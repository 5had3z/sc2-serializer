// ---- Generated by scripts/gen_info_header.py ----
#pragma once
#include "enums.hpp"

#include <array>
#include <set>
#include <unordered_map>
#include <unordered_set>

namespace cvt {
// clang-format off

// Sets to check that a typeid belongs to a race
const static std::unordered_set<int> neutralUnitTypes = { 886, 887, 322, 612, 609, 490, 518, 517, 588, 561, 564, 563, 664, 663, 610, 485, 589, 562, 559, 560, 590, 591, 662, 475, 486, 487, 350, 628, 629, 630, 364, 365, 377, 376, 648, 649, 651, 373, 372, 371, 638, 639, 641, 640, 643, 642, 336, 1958, 1957, 324, 661, 665, 666, 321, 341, 1961, 483, 608, 884, 885, 796, 797, 880, 877, 146, 147, 344, 335, 881, 343, 473, 474, 472, 330, 342, 1904, 1908, 149 };
const static std::unordered_set<int> protossUnitTypes = { 311, 801, 141, 61, 1955, 79, 4, 72, 69, 76, 694, 733, 64, 135, 63, 62, 75, 83, 85, 10, 488, 59, 82, 1911, 495, 78, 66, 84, 60, 894, 70, 71, 77, 1910, 74, 67, 732, 496, 68, 65, 80, 133, 81, 136, 73 };
const static std::unordered_set<int> terranUnitTypes = { 29, 31, 55, 21, 46, 38, 37, 57, 24, 18, 36, 692, 22, 27, 43, 40, 39, 30, 50, 26, 144, 145, 53, 484, 830, 689, 734, 268, 51, 48, 54, 23, 58, 132, 134, 130, 11, 56, 6, 49, 20, 1960, 1913, 45, 25, 33, 32, 28, 44, 42, 41, 19, 47, 5, 52, 691, 34, 35, 498, 500 };
const static std::unordered_set<int> zergUnitTypes = { 9, 115, 8, 96, 114, 113, 289, 143, 12, 15, 14, 13, 17, 16, 103, 112, 87, 137, 138, 104, 116, 90, 88, 1956, 102, 86, 101, 107, 117, 91, 94, 7, 120, 150, 111, 127, 100, 151, 489, 693, 502, 503, 504, 501, 108, 142, 95, 106, 893, 892, 129, 128, 1912, 824, 126, 125, 688, 690, 687, 110, 118, 97, 89, 98, 139, 92, 99, 140, 494, 493, 109, 131, 93, 499, 105, 119 };

// Default vespene or minerals from each resource type id
const static std::unordered_map<int, int> defaultResources = { {886,1800}, {887,900}, {665,1800}, {666,900}, {341,1800}, {1961,1800}, {483,900}, {608,2250}, {884,1800}, {885,900}, {796,1800}, {797,900}, {880,2250}, {146,1800}, {147,900}, {344,2250}, {881,2250}, {342,2250} };

// Research for Each Race by Game Version
const static std::unordered_map<std::string, std::unordered_map<Race, std::set<int>>> raceResearch = {
    {"4.8.2.71663",
        {
            { Race::Protoss, { 45, 46, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1093, 1094, 1097, 1126, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1571, 1592, 1593, 1594, 2720 } },
            { Race::Terran, { 650, 651, 652, 653, 654, 655, 656, 657, 658, 730, 731, 732, 761, 763, 764, 766, 768, 790, 792, 793, 797, 799, 803, 805, 806, 820, 821, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 1532, 2294, 2295, 2296 } },
            { Race::Zerg, { 216, 217, 263, 265, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1223, 1225, 1252, 1253, 1282, 1283, 1286, 1312, 1313, 1314, 1315, 1316, 1317, 1454, 1455, 1482, 3709 } },
        }
    },
    {"4.8.4.73286",
        {
            { Race::Protoss, { 45, 46, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1093, 1094, 1097, 1126, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1571, 1592, 1593, 1594, 2720 } },
            { Race::Terran, { 650, 651, 652, 653, 654, 655, 656, 657, 658, 730, 731, 732, 761, 763, 764, 766, 768, 790, 792, 793, 797, 799, 803, 805, 806, 820, 821, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 1532, 2294, 2295, 2296 } },
            { Race::Zerg, { 216, 217, 263, 265, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1223, 1225, 1252, 1253, 1282, 1283, 1286, 1312, 1313, 1314, 1315, 1316, 1317, 1454, 1455, 1482, 3709 } },
        }
    },
    {"4.8.6.73620",
        {
            { Race::Protoss, { 45, 46, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1093, 1094, 1097, 1126, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1571, 1592, 1593, 1594, 2720 } },
            { Race::Terran, { 650, 651, 652, 653, 654, 655, 656, 657, 658, 730, 731, 732, 761, 763, 764, 766, 768, 790, 792, 793, 797, 799, 803, 805, 806, 820, 821, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 1532, 2294, 2295, 2296 } },
            { Race::Zerg, { 216, 217, 263, 265, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1223, 1225, 1252, 1253, 1282, 1283, 1286, 1312, 1313, 1314, 1315, 1316, 1317, 1454, 1455, 1482, 3709 } },
        }
    },
    {"4.9.1.74456",
        {
            { Race::Protoss, { 45, 46, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1093, 1094, 1097, 1126, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1571, 1592, 1593, 1594, 2720 } },
            { Race::Terran, { 650, 651, 652, 653, 654, 655, 656, 657, 658, 730, 731, 732, 761, 763, 764, 766, 768, 790, 792, 793, 797, 799, 803, 805, 806, 820, 821, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 1532, 2294, 2295, 2296 } },
            { Race::Zerg, { 216, 217, 263, 265, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1223, 1225, 1252, 1253, 1282, 1283, 1286, 1312, 1313, 1314, 1315, 1316, 1317, 1454, 1455, 1482, 3709 } },
        }
    },
    {"4.9.2.74741",
        {
            { Race::Protoss, { 45, 46, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1093, 1094, 1097, 1126, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1571, 1592, 1593, 1594, 2720 } },
            { Race::Terran, { 650, 651, 652, 653, 654, 655, 656, 657, 658, 730, 731, 732, 761, 763, 764, 766, 768, 790, 792, 793, 797, 799, 803, 805, 806, 820, 821, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 1532, 2294, 2295, 2296 } },
            { Race::Zerg, { 216, 217, 263, 265, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1223, 1225, 1252, 1253, 1282, 1283, 1286, 1312, 1313, 1314, 1315, 1316, 1317, 1454, 1455, 1482, 3709 } },
        }
    },
    {"4.9.3.75025",
        {
            { Race::Protoss, { 45, 46, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1093, 1094, 1097, 1126, 1562, 1563, 1564, 1565, 1566, 1567, 1568, 1571, 1592, 1593, 1594, 2720 } },
            { Race::Terran, { 650, 651, 652, 653, 654, 655, 656, 657, 658, 730, 731, 732, 761, 763, 764, 766, 768, 790, 792, 793, 797, 799, 803, 805, 806, 820, 821, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 1532, 2294, 2295, 2296 } },
            { Race::Zerg, { 216, 217, 263, 265, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1223, 1225, 1252, 1253, 1282, 1283, 1286, 1312, 1313, 1314, 1315, 1316, 1317, 1454, 1455, 1482, 3709 } },
        }
    },
};

// Remap non-leveled research action to leveled research action
const static std::unordered_map<std::string, std::unordered_map<Race, std::unordered_map<int, std::array<int, 3>>>> raceResearchReID = {
    {"4.8.2.71663",
        {
            { Race::Protoss, { { 3694, {1065, 1066, 1067} }, { 3695, {1062, 1063, 1064} }, { 3692, {1565, 1566, 1567} }, { 3693, {1562, 1563, 1564} }, { 3696, {1068, 1069, 1070} } } },
            { Race::Terran, { { 3698, {652, 653, 654} }, { 3701, {855, 856, 857} }, { 3699, {861, 862, 863} }, { 3697, {656, 657, 658} }, { 3700, {864, 865, 866} } } },
            { Race::Zerg, { { 3705, {1186, 1187, 1188} }, { 3706, {1192, 1193, 1194} }, { 3703, {1312, 1313, 1314} }, { 3704, {1189, 1190, 1191} }, { 3702, {1315, 1316, 1317} } } },
        }
    },
    {"4.8.4.73286",
        {
            { Race::Protoss, { { 3694, {1065, 1066, 1067} }, { 3695, {1062, 1063, 1064} }, { 3692, {1565, 1566, 1567} }, { 3693, {1562, 1563, 1564} }, { 3696, {1068, 1069, 1070} } } },
            { Race::Terran, { { 3698, {652, 653, 654} }, { 3701, {855, 856, 857} }, { 3699, {861, 862, 863} }, { 3697, {656, 657, 658} }, { 3700, {864, 865, 866} } } },
            { Race::Zerg, { { 3705, {1186, 1187, 1188} }, { 3706, {1192, 1193, 1194} }, { 3703, {1312, 1313, 1314} }, { 3704, {1189, 1190, 1191} }, { 3702, {1315, 1316, 1317} } } },
        }
    },
    {"4.8.6.73620",
        {
            { Race::Protoss, { { 3694, {1065, 1066, 1067} }, { 3695, {1062, 1063, 1064} }, { 3692, {1565, 1566, 1567} }, { 3693, {1562, 1563, 1564} }, { 3696, {1068, 1069, 1070} } } },
            { Race::Terran, { { 3698, {652, 653, 654} }, { 3701, {855, 856, 857} }, { 3699, {861, 862, 863} }, { 3697, {656, 657, 658} }, { 3700, {864, 865, 866} } } },
            { Race::Zerg, { { 3705, {1186, 1187, 1188} }, { 3706, {1192, 1193, 1194} }, { 3703, {1312, 1313, 1314} }, { 3704, {1189, 1190, 1191} }, { 3702, {1315, 1316, 1317} } } },
        }
    },
    {"4.9.1.74456",
        {
            { Race::Protoss, { { 3694, {1065, 1066, 1067} }, { 3695, {1062, 1063, 1064} }, { 3692, {1565, 1566, 1567} }, { 3693, {1562, 1563, 1564} }, { 3696, {1068, 1069, 1070} } } },
            { Race::Terran, { { 3698, {652, 653, 654} }, { 3701, {855, 856, 857} }, { 3699, {861, 862, 863} }, { 3697, {656, 657, 658} }, { 3700, {864, 865, 866} } } },
            { Race::Zerg, { { 3705, {1186, 1187, 1188} }, { 3706, {1192, 1193, 1194} }, { 3703, {1312, 1313, 1314} }, { 3704, {1189, 1190, 1191} }, { 3702, {1315, 1316, 1317} } } },
        }
    },
    {"4.9.2.74741",
        {
            { Race::Protoss, { { 3694, {1065, 1066, 1067} }, { 3695, {1062, 1063, 1064} }, { 3692, {1565, 1566, 1567} }, { 3693, {1562, 1563, 1564} }, { 3696, {1068, 1069, 1070} } } },
            { Race::Terran, { { 3698, {652, 653, 654} }, { 3701, {855, 856, 857} }, { 3699, {861, 862, 863} }, { 3697, {656, 657, 658} }, { 3700, {864, 865, 866} } } },
            { Race::Zerg, { { 3705, {1186, 1187, 1188} }, { 3706, {1192, 1193, 1194} }, { 3703, {1312, 1313, 1314} }, { 3704, {1189, 1190, 1191} }, { 3702, {1315, 1316, 1317} } } },
        }
    },
    {"4.9.3.75025",
        {
            { Race::Protoss, { { 3694, {1065, 1066, 1067} }, { 3695, {1062, 1063, 1064} }, { 3692, {1565, 1566, 1567} }, { 3693, {1562, 1563, 1564} }, { 3696, {1068, 1069, 1070} } } },
            { Race::Terran, { { 3698, {652, 653, 654} }, { 3701, {855, 856, 857} }, { 3699, {861, 862, 863} }, { 3697, {656, 657, 658} }, { 3700, {864, 865, 866} } } },
            { Race::Zerg, { { 3705, {1186, 1187, 1188} }, { 3706, {1192, 1193, 1194} }, { 3703, {1312, 1313, 1314} }, { 3704, {1189, 1190, 1191} }, { 3702, {1315, 1316, 1317} } } },
        }
    },
};

// clang-format on
}// namespace cvt
